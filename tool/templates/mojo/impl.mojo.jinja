{% for method in methods %}
alias fn_{{ method.method_name }} = fn ({{ method.params }}) -> {{ method.return_ty }}
{% endfor %}
{% if dtor_method_name.len() != 0 -%}
alias fn_{{ dtor_method_name }} = fn (self: UnsafePointer[{{ ty_name }}]) -> None
{%- endif %}

var __wrapper = _DLWrapper()

@value
struct _DLWrapper:
    var _handle: DLHandle
    {% for method in methods %}
    var _{{ method.method_name }}: fn_{{ method.method_name }}
    {% endfor %}
    {% if dtor_method_name.len() != 0 -%}
    var _{{ dtor_method_name }}: fn_{{ dtor_method_name }}
    {%- endif %}

    fn __init__(out self):
        self._handle = DLHandle(LIBNAME)
        {% for method in methods %}
        self._{{ method.method_name }} = self._handle.get_function[fn_{{ method.method_name }}]("{{ method.abi_name }}")
        {% endfor %}
        {% if dtor_method_name.len() != 0 -%}
        self._{{ dtor_method_name }} = self._handle.get_function[fn_{{ dtor_method_name }}]("{{ dtor_name.unwrap_or("") }}")
        {%- endif %}

{% for method in methods %}
@always_inline
fn {{ method.method_name }}({{ method.params }}) -> {{ method.return_ty }}:
    return __wrapper._{{ method.method_name }}({{ method.param_names }})
{% endfor %}
{% if dtor_method_name.len() != 0 -%}
@always_inline
fn {{ dtor_method_name }}(self: UnsafePointer[{{ ty_name }}]) -> None:
    return __wrapper._{{ dtor_method_name }}(self)
{%- endif %}